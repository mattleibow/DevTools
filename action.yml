name: 'Update Engagement Scores'

description: 'Update engagement scores in a project'

inputs:
  project:
    description: 'The project to update the scores in.'
  column:
    description: 'The column to update the scores in.'
    default: 'Engagement Score'
  project-token:
    description: 'The GitHub token to use when updating the project.'
    required: true

runs:
  using: "composite"
  steps:

    - name: Update the engagement scores
      shell: pwsh
      env:
        GITHUB_TOKEN: ${{ github.token }}
        GH_PROJECT: ${{ inputs.project }}
        GH_COLUMN: ${{ inputs.column }}
        GH_TOKEN: ${{ inputs.project-token }}
      run: |
        "Calculating the engagement scores.."

        Write-Output "::group::Sending the request to the server..."
        $body = ConvertTo-Json -InputObject @{
          version = 1
          issue = @{
            owner = "${{ github.event.repository.owner.login }}"
            repo = "${{ github.event.repository.name }}"
          }
        }

        Write-Output "JSON Body:"
        Write-Output $body

        $hostAddress = "https://labeled-by-ai.braveisland-12c152b6.southafricanorth.azurecontainerapps.io"
        $uri = "$hostAddress/api/engagement-score"
        $headers = @{
          'X-GitHub-Token' = "$env:GITHUB_TOKEN"
        }
        $response = Invoke-RestMethod `
          -Method Post `
          -Uri $uri `
          -Body $body `
          -ContentType 'application/json' `
          -Headers $headers `
          -StatusCodeVariable responseStatusCode

        Write-Output "The server replied with a status code of: $responseStatusCode"

        if (-not $response) {
          Write-Error "Failed to get a response from the server."
          Write-Output "::endgroup::"
          exit 1
        }

        if ($response.Count -eq 0) {
          Write-Warning "No open issues were found."
          Write-Output "::endgroup::"
          exit 0
        }

        Write-Output "::endgroup::"

        Write-Output "::group::Updating the scores in the project..."

        Write-Output "Loading the project using the specified project number '$($env:GH_PROJECT)'..."
        $project = gh project list `
            --format json `
            --owner "${{ github.event.repository.owner.login }}" |
          ConvertFrom-Json |
          Select-Object -ExpandProperty projects |
          Where-Object { $_.number -eq "$env:GH_PROJECT" }
        $projectId = $project.id
        $projectNumber = $project.number
        $projectTitle = $project.title
        Write-Output "Project ID: $projectId"
        Write-Output "Project Number: $projectNumber"
        Write-Output "Project Title: $projectTitle"

        Write-Output "Loading the project field using the specified column name '$($env:GH_COLUMN)'..."
        $field = gh project field-list `
            $projectNumber `
            --format json `
            --owner "${{ github.event.repository.owner.login }}" |
          ConvertFrom-Json |
          Select-Object -ExpandProperty fields |
          Where-Object { $_.name -eq "$env:GH_COLUMN" }
        $fieldId = $field.id
        $fieldName = $field.name
        Write-Output "Field ID: $fieldId"
        Write-Output "Field Name: $fieldName"

        foreach ($item in $response) {
          $issueId = $item.issue.id
          $issueNumber = $item.issue.number
          $engagementScore = $item.engagement.score

          Write-Output "Updating the score of issue #$issueNumber to $engagementScore.."

          gh project item-edit `
            --id "$issueId" `
            --project-id "$projectId" `
            --field-id "$fieldId" `
            --number "$engagementScore"
        }

        Write-Output "::endgroup::"
