name: 'Update Engagement Scores'

description: 'Update engagement scores in a project'

inputs:
  project:
    description: 'The project to update the scores in.'
  column:
    description: 'The column to update the scores in.'
    default: 'Engagement Score'
  project-token:
    description: 'The GitHub token to use when updating the project.'
    required: true
  update-project:
    default: 'true'
    description: 'Whether or not to update the project items with the score.'

runs:
  using: "composite"
  steps:

    - name: Update the engagement scores
      shell: pwsh
      env:
        GITHUB_TOKEN: ${{ github.token }}
        GH_TOKEN: ${{ inputs.project-token }}
        PROJECT_OWNER: ${{ github.event.repository.owner.login }}
        PROJECT_REPO: ${{ github.event.repository.name }}
        PROJECT_NUMBER: ${{ inputs.project }}
        PROJECT_FIELD_NAME: ${{ inputs.column }}
        UPDATE_PROJECT: ${{ inputs.update-project }}
      run: |
        "Calculating the engagement scores.."

        Write-Output "::group::Sending the request to the server..."
        $body = ConvertTo-Json -InputObject @{
          version = 1
          project = @{
            owner = "$env:PROJECT_OWNER"
            number = "$env:PROJECT_NUMBER"
          }
        }

        Write-Output "JSON Body:"
        Write-Output $body

        $hostAddress = "https://labeled-by-ai.braveisland-12c152b6.southafricanorth.azurecontainerapps.io"
        $uri = "$hostAddress/api/engagement-score"
        $headers = @{
          'X-GitHub-Token' = "$env:GITHUB_TOKEN"
        }
        $response = Invoke-RestMethod `
          -Method Post `
          -Uri $uri `
          -Body $body `
          -ContentType 'application/json' `
          -Headers $headers `
          -StatusCodeVariable responseStatusCode

        Write-Output "The server replied with a status code of: $responseStatusCode"

        if (-not $response) {
          Write-Error "Failed to get a response from the server."
          Write-Output "::endgroup::"
          exit 1
        }

        if ($response.Count -eq 0) {
          Write-Warning "No open issues were found."
          Write-Output "::endgroup::"
          exit 0
        }

        Write-Output "::endgroup::"

        Write-Output "::group::Updating the scores in the project..."

        Write-Output "Reading the project information..."
        $projectId = $response.project.id
        $projectNumber = $response.project.number
        $projectOwner = $response.project.owner
        $projectUpdateCount = $response.project.totalItems
        Write-Output "Project ID: $projectId"
        Write-Output "Project Owner: $projectOwner"
        Write-Output "Project Number: $projectNumber"
        Write-Output "Project Items to Update: $projectUpdateCount"

        Write-Output "Loading the project field using the specified column name '$($env:PROJECT_FIELD_NAME)'..."
        $field = gh project field-list `
            $projectNumber `
            --owner "$projectOwner" `
            --format json |
          ConvertFrom-Json |
          Select-Object -ExpandProperty fields |
          Where-Object { $_.name -eq "$env:PROJECT_FIELD_NAME" }
        $fieldId = $field.id
        $fieldName = $field.name
        Write-Output "Field ID: $fieldId"
        Write-Output "Field Name: $fieldName"

        Write-Output "Updating the scores in the project..."
        foreach ($item in $response.items) {
          $itemId = $item.id
          $repository = "$($item.issue.owner)/$($item.issue.repo)"
          $issueNumber = $item.issue.number
          $engagementScore = $item.engagement.score

          Write-Output "Updating the score of issue $repository#$issueNumber to $engagementScore.."

          if ($env:UPDATE_PROJECT -eq 'true') {
            gh project item-edit `
              --id "$itemId" `
              --project-id "$projectId" `
              --field-id "$fieldId" `
              --number "$engagementScore"
          }
        }

        Write-Output "::endgroup::"
